# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        platform: [x86, x64]
        exclude:
          - os: ubuntu-latest
            platform: x86
          - os: macOS-latest
            platform: x86
    steps:
      - uses: actions/checkout@v2
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.3.0
        with:
          arch: ${{ matrix.platform }}
        if: matrix.os == 'windows-latest'
      - name: Compile compression library
        run: |
          cd compression
          compile.bat
        shell: cmd
        if: matrix.os == 'windows-latest'
      - name: Compile compression library
        run: |
          cd compression
          chmod +x compile.sh
          ./compile.sh
          mv compressionlib-nocb.so ../compressionlib-nocb-${{ matrix.os }}-${{ matrix.platform }}.so
        shell: bash
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      - name: Rename library
        run: |
          mv compression\\compressionlib-nocb.dll compressionlib-nocb-${{ matrix.os }}-${{ matrix.platform }}.dll
        shell: cmd
        if: matrix.os == 'windows-latest'
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        if: matrix.os == 'windows-latest'
        with:
          name: compression-${{ matrix.os }}-${{ matrix.platform }}
          path: |
            compressionlib-nocb-${{ matrix.os }}-${{ matrix.platform }}.dll
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
        with:
          name: compression-${{ matrix.os }}-${{ matrix.platform }}
          path: |
            compressionlib-nocb-${{ matrix.os }}-${{ matrix.platform }}.so
  build:
    needs: build_binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        platform: [x86, x64]
        python-version: [3.8]
        python-platform: [x86, x64]
        exclude:
          - platform: x86
            python-platform: x64
          - os: ubuntu-latest
            python-platform: x86
          - os: ubuntu-latest
            platform: x86
          - os: macOS-latest
            python-platform: x86
          - os: macOS-latest
            platform: x86
    steps:
    - uses: actions/checkout@v2
    - name: Download binary artifacts
      uses: actions/download-artifact@v2
      with:
        name: compression-${{ matrix.os }}-${{ matrix.python-platform }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.python-platform }}
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel setuptools pyinstaller
        pip install flake8 pytest
        pip install -r requirements.txt
    - name: Lint with flake8
      shell: bash
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run tests
      shell: bash
      run: |
        python setup.py test

    - name: Build package
      shell: bash
      run: |
        python setup.py sdist bdist_wheel

    - name: Build pyinstaller package
      shell: bash
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --name "sourcehold" --add-binary "compressionlib-nocb-${{ matrix.os }}-${{ matrix.python-platform }}.dll;sourcehold/." sourcehold/__main__.py --noconfirm --add-data "cheatengine/SHC_data.CT;sourcehold/cheatengine/." sourcehold/__main__.py --noconfirm --exclude-module matplotlib --exclude-module numpy --exclude-module scipy --exclude-module tkinter

    - name: Build pyinstaller package
      shell: bash
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: |
        pyinstaller --name "sourcehold" --add-binary "compressionlib-nocb-${{ matrix.os }}-${{ matrix.python-platform }}.so:sourcehold/." sourcehold/__main__.py --noconfirm --add-data "cheatengine/SHC_data.CT;sourcehold/cheatengine/." sourcehold/__main__.py --noconfirm --exclude-module matplotlib --exclude-module numpy --exclude-module scipy --exclude-module tkinter

    - name: Archive packages
      uses: actions/upload-artifact@v2
      with:
        name: sourcehold-${{ matrix.os }}-${{ matrix.platform }}-py${{ matrix.python-version }}-py-${{ matrix.python-platform }}
        path: |
          dist/*


  test_package:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        platform: [x86, x64]
        python-version: [3.8]
        python-platform: [x86, x64]
        exclude:
          - platform: x86
            python-platform: x64
          - os: ubuntu-latest
            python-platform: x86
          - os: ubuntu-latest
            platform: x86
          - os: macOS-latest
            python-platform: x86
          - os: macOS-latest
            platform: x86
    steps:
    - name: Download package
      uses: actions/download-artifact@v2
      with:
        name: sourcehold-${{ matrix.os }}-${{ matrix.platform }}-py${{ matrix.python-version }}-py-${{ matrix.python-platform }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.python-platform }}
    - name: Pip install module
      run: |
        python -m pip install $(ls *.whl)
      shell: bash
    - name: Pip test module
      run: |
        python -c "import sourcehold"
      shell: bash