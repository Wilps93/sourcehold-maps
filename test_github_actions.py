#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GitHub Actions –ª–æ–∫–∞–ª—å–Ω–æ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Actions
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def check_file_exists(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    version = sys.version_info
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version.major == 3 and version.minor >= 8:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç (3.8+)")
        return True
    else:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False

def check_python_packages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Python –ø–∞–∫–µ—Ç—ã"""
    required_packages = [
        'PIL', 'pymem', 'dclimplode', 'numpy', 'cv2', 'tkinter'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'tkinter':
                import tkinter
            elif package == 'cv2':
                import cv2
            elif package == 'PIL':
                import PIL
            elif package == 'pymem':
                import pymem
            elif package == 'dclimplode':
                import dclimplode
            elif package == 'numpy':
                import numpy
                
            print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå {package} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            missing_packages.append(package)
    
    return len(missing_packages) == 0

def check_github_workflows():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ GitHub Actions —Ñ–∞–π–ª–æ–≤"""
    workflows_dir = Path(".github/workflows")
    required_workflows = [
        "build-installer.yml",
        "build-installer-chocolatey.yml", 
        "build-installer-simple.yml"
    ]
    
    all_exist = True
    
    if not workflows_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {workflows_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    for workflow in required_workflows:
        workflow_path = workflows_dir / workflow
        if workflow_path.exists():
            print(f"‚úÖ GitHub Action: {workflow}")
        else:
            print(f"‚ùå GitHub Action: {workflow} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_exist = False
    
    return all_exist

def check_build_scripts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∫–∏"""
    required_scripts = [
        ("build_exe.py", "–°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ EXE"),
        ("build_installer.py", "–°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –∏–Ω—Å—Ç–∞–ª–ª–µ—Ä–∞"),
        ("download_dependencies.py", "–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
        ("installer.nsi", "NSIS —Å–∫—Ä–∏–ø—Ç –∏–Ω—Å—Ç–∞–ª–ª–µ—Ä–∞")
    ]
    
    all_exist = True
    
    for script, description in required_scripts:
        if check_file_exists(script, description):
            pass
        else:
            all_exist = False
    
    return all_exist

def check_application_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    required_files = [
        ("sourcehold_converter_gui.py", "GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
        ("sourcehold_converter_cli.py", "CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
        ("requirements.txt", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python")
    ]
    
    all_exist = True
    
    for file, description in required_files:
        if check_file_exists(file, description):
            pass
        else:
            all_exist = False
    
    return all_exist

def check_dependencies_directory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    deps_dir = Path("dependencies")
    
    if deps_dir.exists():
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {deps_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        required_deps = [
            "python-3.11.8-amd64.exe",
            "vc_redist.x64.exe"
        ]
        
        for dep in required_deps:
            dep_path = deps_dir / dep
            if dep_path.exists():
                size_mb = dep_path.stat().st_size / (1024 * 1024)
                print(f"  ‚úÖ {dep} ({size_mb:.1f} MB)")
            else:
                print(f"  ‚ùå {dep} - –ù–ï –ù–ê–ô–î–ï–ù")
        
        return True
    else:
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {deps_dir} - –ù–ï –ù–ê–ô–î–ï–ù–ê")
        return False

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    try:
        result = subprocess.run(
            ["git", "status", "--porcelain"],
            capture_output=True,
            text=True,
            check=True
        )
        
        if result.stdout.strip():
            print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git:")
            for line in result.stdout.strip().split('\n'):
                print(f"  {line}")
        else:
            print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∏—Å—Ç")
        
        return True
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Git —Å—Ç–∞—Ç—É—Å–∞")
        return False
    except FileNotFoundError:
        print("‚ö†Ô∏è  Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_github_token():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ GitHub —Ç–æ–∫–µ–Ω–∞"""
    token = os.environ.get('GITHUB_TOKEN') or os.environ.get('GH_TOKEN')
    
    if token:
        print("‚úÖ GitHub —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")
        return True
    else:
        print("‚ö†Ô∏è  GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω (GITHUB_TOKEN –∏–ª–∏ GH_TOKEN)")
        print("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return True

def run_build_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É"""
    print("\nüî® –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–±–æ—Ä–∫–∏...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É EXE
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ EXE...")
        result = subprocess.run(
            [sys.executable, "build_exe.py", "--test"],
            capture_output=True,
            text=True,
            timeout=300  # 5 –º–∏–Ω—É—Ç
        )
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ EXE –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–±–æ—Ä–∫–∏ EXE:")
            print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–±–æ—Ä–∫–µ: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ GitHub Actions")
    print("=" * 50)
    
    checks = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    checks.append(("Python –≤–µ—Ä—Å–∏—è", check_python_version()))
    checks.append(("Python –ø–∞–∫–µ—Ç—ã", check_python_packages()))
    checks.append(("GitHub Actions", check_github_workflows()))
    checks.append(("–°–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∫–∏", check_build_scripts()))
    checks.append(("–§–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", check_application_files()))
    checks.append(("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", check_dependencies_directory()))
    checks.append(("Git —Å—Ç–∞—Ç—É—Å", check_git_status()))
    checks.append(("GitHub —Ç–æ–∫–µ–Ω", check_github_token()))
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    
    passed = 0
    total = len(checks)
    
    for check_name, result in checks:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–ê"
        print(f"{check_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! GitHub Actions –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–±–æ—Ä–∫–µ
        try:
            response = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É? (y/N): ").lower().strip()
            if response in ['y', 'yes']:
                if run_build_test():
                    print("\nüéâ –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    print("\n‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        except KeyboardInterrupt:
            print("\n\n–¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ.")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º GitHub Actions.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not check_python_version():
            print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+")
        if not check_python_packages():
            print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ Python –ø–∞–∫–µ—Ç—ã: pip install -r requirements.txt")
        if not check_github_workflows():
            print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã .github/workflows/ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        if not check_build_scripts():
            print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        if not check_application_files():
            print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        if not check_dependencies_directory():
            print("- –ó–∞–ø—É—Å—Ç–∏—Ç–µ download_dependencies.py –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)